/*
 * generated by Xtext 2.31.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTokensApi_tokenParserRuleCall_0_0());
				}
				lv_tokens_0_0=ruleapi_token
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"tokens",
						lv_tokens_0_0,
						"org.xtext.example.mydsl.MyDsl.api_token");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getArraysArrayParserRuleCall_1_0());
				}
				lv_arrays_1_0=rulearray
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"arrays",
						lv_arrays_1_0,
						"org.xtext.example.mydsl.MyDsl.array");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getLoopsLoopParserRuleCall_2_0());
				}
				lv_loops_2_0=ruleloop
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"loops",
						lv_loops_2_0,
						"org.xtext.example.mydsl.MyDsl.loop");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getIdentificationsIdentifyParserRuleCall_3_0());
				}
				lv_identifications_3_0=ruleidentify
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"identifications",
						lv_identifications_3_0,
						"org.xtext.example.mydsl.MyDsl.identify");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleidentify
entryRuleidentify returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifyRule()); }
	iv_ruleidentify=ruleidentify
	{ $current=$iv_ruleidentify.current; }
	EOF;

// Rule identify
ruleidentify returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='identify'
		{
			newLeafNode(otherlv_0, grammarAccess.getIdentifyAccess().getIdentifyKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIdentifyAccess().getIdentify_arrayArray_contentParserRuleCall_1_0_0());
					}
					lv_identify_array_1_0=rulearray_content
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIdentifyRule());
						}
						add(
							$current,
							"identify_array",
							lv_identify_array_1_0,
							"org.xtext.example.mydsl.MyDsl.array_content");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			{
				newCompositeNode(grammarAccess.getIdentifyAccess().getArrayElementParserRuleCall_1_1());
			}
			this_arrayElement_2=rulearrayElement
			{
				$current = $this_arrayElement_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getIdentifyAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIdentifyAccess().getIdentify_arrayArray_contentParserRuleCall_2_1_0());
					}
					lv_identify_array_4_0=rulearray_content
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIdentifyRule());
						}
						add(
							$current,
							"identify_array",
							lv_identify_array_4_0,
							"org.xtext.example.mydsl.MyDsl.array_content");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleloop
entryRuleloop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	iv_ruleloop=ruleloop
	{ $current=$iv_ruleloop.current; }
	EOF;

// Rule loop
ruleloop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='on'
		{
			newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getOnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLoopAccess().getLoop_arrayArrayParserRuleCall_1_0());
				}
				lv_loop_array_1_0=rulearray
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLoopRule());
					}
					add(
						$current,
						"loop_array",
						lv_loop_array_1_0,
						"org.xtext.example.mydsl.MyDsl.array");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getLoopAccess().getDoParserRuleCall_2());
		}
		ruledo
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuledo
entryRuledo returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDoRule()); }
	iv_ruledo=ruledo
	{ $current=$iv_ruledo.current.getText(); }
	EOF;

// Rule do
ruledo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getDoAccess().getApplyParserRuleCall());
	}
	this_apply_0=ruleapply
	{
		$current.merge(this_apply_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleapply
entryRuleapply returns [String current=null]:
	{ newCompositeNode(grammarAccess.getApplyRule()); }
	iv_ruleapply=ruleapply
	{ $current=$iv_ruleapply.current.getText(); }
	EOF;

// Rule apply
ruleapply returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='apply'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getApplyAccess().getApplyKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getApplyAccess().getActionParserRuleCall_1());
		}
		this_action_1=ruleaction
		{
			$current.merge(this_action_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleaction
entryRuleaction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleaction=ruleaction
	{ $current=$iv_ruleaction.current.getText(); }
	EOF;

// Rule action
ruleaction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getActionAccess().getLinespaceParserRuleCall());
	}
	this_linespace_0=rulelinespace
	{
		$current.merge(this_linespace_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulearray
entryRulearray returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	iv_rulearray=rulearray
	{ $current=$iv_rulearray.current; }
	EOF;

// Rule array
rulearray returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayAccess().getTargetsTargetParserRuleCall_0_0());
				}
				lv_targets_0_0=ruletarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayRule());
					}
					add(
						$current,
						"targets",
						lv_targets_0_0,
						"org.xtext.example.mydsl.MyDsl.target");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_array_names_1_0=RULE_VALID_ID
				{
					newLeafNode(lv_array_names_1_0, grammarAccess.getArrayAccess().getArray_namesVALID_IDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArrayRule());
					}
					addWithLastConsumed(
						$current,
						"array_names",
						lv_array_names_1_0,
						"org.xtext.example.mydsl.MyDsl.VALID_ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayAccess().getArray_contentsArray_contentParserRuleCall_2_0());
				}
				lv_array_contents_2_0=rulearray_content
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayRule());
					}
					add(
						$current,
						"array_contents",
						lv_array_contents_2_0,
						"org.xtext.example.mydsl.MyDsl.array_content");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='\n'
		{
			newLeafNode(otherlv_3, grammarAccess.getArrayAccess().getLineFeedKeyword_3());
		}
	)
;

// Entry rule entryRulearray_content
entryRulearray_content returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArray_contentRule()); }
	iv_rulearray_content=rulearray_content
	{ $current=$iv_rulearray_content.current; }
	EOF;

// Rule array_content
rulearray_content returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getArray_contentAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArray_contentAccess().getArrayArrayElementParserRuleCall_1_0());
				}
				lv_Array_1_0=rulearrayElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArray_contentRule());
					}
					add(
						$current,
						"Array",
						lv_Array_1_0,
						"org.xtext.example.mydsl.MyDsl.arrayElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getArray_contentAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArray_contentAccess().getArrayArrayElementParserRuleCall_2_1_0());
					}
					lv_Array_3_0=rulearrayElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArray_contentRule());
						}
						add(
							$current,
							"Array",
							lv_Array_3_0,
							"org.xtext.example.mydsl.MyDsl.arrayElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getArray_contentAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulearrayElement
entryRulearrayElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayElementRule()); }
	iv_rulearrayElement=rulearrayElement
	{ $current=$iv_rulearrayElement.current; }
	EOF;

// Rule arrayElement
rulearrayElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getArrayElementAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getArrayElementRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuletarget
entryRuletarget returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTargetRule()); }
	iv_ruletarget=ruletarget
	{ $current=$iv_ruletarget.current.getText(); }
	EOF;

// Rule target
ruletarget returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTargetAccess().getInstanceParserRuleCall_0());
		}
		this_Instance_0=ruleInstance
		{
			$current.merge(this_Instance_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTargetAccess().getRepoParserRuleCall_1());
		}
		this_Repo_1=ruleRepo
		{
			$current.merge(this_Repo_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTargetAccess().getProjectParserRuleCall_2());
		}
		this_Project_2=ruleProject
		{
			$current.merge(this_Project_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTargetAccess().getFileParserRuleCall_3());
		}
		this_File_3=ruleFile
		{
			$current.merge(this_File_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInstance
entryRuleInstance returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInstanceRule()); }
	iv_ruleInstance=ruleInstance
	{ $current=$iv_ruleInstance.current.getText(); }
	EOF;

// Rule Instance
ruleInstance returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='instance'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getInstanceAccess().getInstanceKeyword());
	}
;

// Entry rule entryRuleRepo
entryRuleRepo returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRepoRule()); }
	iv_ruleRepo=ruleRepo
	{ $current=$iv_ruleRepo.current.getText(); }
	EOF;

// Rule Repo
ruleRepo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='repo'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRepoAccess().getRepoKeyword());
	}
;

// Entry rule entryRuleProject
entryRuleProject returns [String current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current.getText(); }
	EOF;

// Rule Project
ruleProject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='project'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getProjectAccess().getProjectKeyword());
	}
;

// Entry rule entryRuleFile
entryRuleFile returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current.getText(); }
	EOF;

// Rule File
ruleFile returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='file'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFileAccess().getFileKeyword());
	}
;

// Entry rule entryRuleapi_token
entryRuleapi_token returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getApi_tokenRule()); }
	iv_ruleapi_token=ruleapi_token
	{ $current=$iv_ruleapi_token.current; }
	EOF;

// Rule api_token
ruleapi_token returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='token '
		{
			newLeafNode(otherlv_0, grammarAccess.getApi_tokenAccess().getTokenKeyword_0());
		}
		(
			(
				lv_nom_token_1_0=RULE_VALID_ID
				{
					newLeafNode(lv_nom_token_1_0, grammarAccess.getApi_tokenAccess().getNom_tokenVALID_IDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getApi_tokenRule());
					}
					setWithLastConsumed(
						$current,
						"nom_token",
						lv_nom_token_1_0,
						"org.xtext.example.mydsl.MyDsl.VALID_ID");
				}
			)
		)
		(
			(
				lv_token_2_0=RULE_STRING
				{
					newLeafNode(lv_token_2_0, grammarAccess.getApi_tokenAccess().getTokenSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getApi_tokenRule());
					}
					setWithLastConsumed(
						$current,
						"token",
						lv_token_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getApi_tokenAccess().getLinejumpParserRuleCall_3());
			}
			rulelinejump
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRulelinespace
entryRulelinespace returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLinespaceRule()); }
	iv_rulelinespace=rulelinespace
	{ $current=$iv_rulelinespace.current.getText(); }
	EOF;

// Rule linespace
rulelinespace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='\t'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLinespaceAccess().getTabKeyword());
	}
;

// Entry rule entryRulelinejump
entryRulelinejump returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLinejumpRule()); }
	iv_rulelinejump=rulelinejump
	{ $current=$iv_rulelinejump.current.getText(); }
	EOF;

// Rule linejump
rulelinejump returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='\n'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLinejumpAccess().getLineFeedKeyword());
	}
;

RULE_VALID_ID : ('_'|RULE_LETTER) (RULE_LETTER|RULE_DIGIT|'_')*;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z');

fragment RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
