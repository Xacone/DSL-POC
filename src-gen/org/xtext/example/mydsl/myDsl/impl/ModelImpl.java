/**
 * generated by Xtext 2.31.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.api_token;
import org.xtext.example.mydsl.myDsl.array;
import org.xtext.example.mydsl.myDsl.identify;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ModelImpl#getTokens <em>Tokens</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ModelImpl#getArrays <em>Arrays</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ModelImpl#getLoops <em>Loops</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ModelImpl#getIdentifications <em>Identifications</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The cached value of the '{@link #getTokens() <em>Tokens</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTokens()
   * @generated
   * @ordered
   */
  protected EList<api_token> tokens;

  /**
   * The cached value of the '{@link #getArrays() <em>Arrays</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArrays()
   * @generated
   * @ordered
   */
  protected EList<array> arrays;

  /**
   * The cached value of the '{@link #getLoops() <em>Loops</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoops()
   * @generated
   * @ordered
   */
  protected EList<String> loops;

  /**
   * The cached value of the '{@link #getIdentifications() <em>Identifications</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentifications()
   * @generated
   * @ordered
   */
  protected EList<identify> identifications;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<api_token> getTokens()
  {
    if (tokens == null)
    {
      tokens = new EObjectContainmentEList<api_token>(api_token.class, this, MyDslPackage.MODEL__TOKENS);
    }
    return tokens;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<array> getArrays()
  {
    if (arrays == null)
    {
      arrays = new EObjectContainmentEList<array>(array.class, this, MyDslPackage.MODEL__ARRAYS);
    }
    return arrays;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getLoops()
  {
    if (loops == null)
    {
      loops = new EDataTypeEList<String>(String.class, this, MyDslPackage.MODEL__LOOPS);
    }
    return loops;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<identify> getIdentifications()
  {
    if (identifications == null)
    {
      identifications = new EObjectContainmentEList<identify>(identify.class, this, MyDslPackage.MODEL__IDENTIFICATIONS);
    }
    return identifications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__TOKENS:
        return ((InternalEList<?>)getTokens()).basicRemove(otherEnd, msgs);
      case MyDslPackage.MODEL__ARRAYS:
        return ((InternalEList<?>)getArrays()).basicRemove(otherEnd, msgs);
      case MyDslPackage.MODEL__IDENTIFICATIONS:
        return ((InternalEList<?>)getIdentifications()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__TOKENS:
        return getTokens();
      case MyDslPackage.MODEL__ARRAYS:
        return getArrays();
      case MyDslPackage.MODEL__LOOPS:
        return getLoops();
      case MyDslPackage.MODEL__IDENTIFICATIONS:
        return getIdentifications();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__TOKENS:
        getTokens().clear();
        getTokens().addAll((Collection<? extends api_token>)newValue);
        return;
      case MyDslPackage.MODEL__ARRAYS:
        getArrays().clear();
        getArrays().addAll((Collection<? extends array>)newValue);
        return;
      case MyDslPackage.MODEL__LOOPS:
        getLoops().clear();
        getLoops().addAll((Collection<? extends String>)newValue);
        return;
      case MyDslPackage.MODEL__IDENTIFICATIONS:
        getIdentifications().clear();
        getIdentifications().addAll((Collection<? extends identify>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__TOKENS:
        getTokens().clear();
        return;
      case MyDslPackage.MODEL__ARRAYS:
        getArrays().clear();
        return;
      case MyDslPackage.MODEL__LOOPS:
        getLoops().clear();
        return;
      case MyDslPackage.MODEL__IDENTIFICATIONS:
        getIdentifications().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.MODEL__TOKENS:
        return tokens != null && !tokens.isEmpty();
      case MyDslPackage.MODEL__ARRAYS:
        return arrays != null && !arrays.isEmpty();
      case MyDslPackage.MODEL__LOOPS:
        return loops != null && !loops.isEmpty();
      case MyDslPackage.MODEL__IDENTIFICATIONS:
        return identifications != null && !identifications.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (loops: ");
    result.append(loops);
    result.append(')');
    return result.toString();
  }

} //ModelImpl
