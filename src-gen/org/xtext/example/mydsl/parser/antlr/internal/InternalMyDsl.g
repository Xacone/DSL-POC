/*
 * generated by Xtext 2.31.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getArraysArrayParserRuleCall_0());
			}
			lv_arrays_0_0=rulearray
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"arrays",
					lv_arrays_0_0,
					"org.xtext.example.mydsl.MyDsl.array");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRulearray
entryRulearray returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	iv_rulearray=rulearray
	{ $current=$iv_rulearray.current; }
	EOF;

// Rule array
rulearray returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayAccess().getTargetsTargetParserRuleCall_0_0());
				}
				lv_targets_0_0=ruletarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayRule());
					}
					add(
						$current,
						"targets",
						lv_targets_0_0,
						"org.xtext.example.mydsl.MyDsl.target");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_array_names_1_0=RULE_VALID_ID
				{
					newLeafNode(lv_array_names_1_0, grammarAccess.getArrayAccess().getArray_namesVALID_IDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArrayRule());
					}
					addWithLastConsumed(
						$current,
						"array_names",
						lv_array_names_1_0,
						"org.xtext.example.mydsl.MyDsl.VALID_ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayAccess().getArrayArrayElementParserRuleCall_3_0());
				}
				lv_Array_3_0=rulearrayElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayRule());
					}
					add(
						$current,
						"Array",
						lv_Array_3_0,
						"org.xtext.example.mydsl.MyDsl.arrayElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getArrayAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayAccess().getArrayArrayElementParserRuleCall_4_1_0());
					}
					lv_Array_5_0=rulearrayElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayRule());
						}
						add(
							$current,
							"Array",
							lv_Array_5_0,
							"org.xtext.example.mydsl.MyDsl.arrayElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='}\n'
		{
			newLeafNode(otherlv_6, grammarAccess.getArrayAccess().getRightCurlyBracketLineFeedLfKeyword_5());
		}
	)
;

// Entry rule entryRulearrayElement
entryRulearrayElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayElementRule()); }
	iv_rulearrayElement=rulearrayElement
	{ $current=$iv_rulearrayElement.current; }
	EOF;

// Rule arrayElement
rulearrayElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getArrayElementAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getArrayElementRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuletarget
entryRuletarget returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTargetRule()); }
	iv_ruletarget=ruletarget
	{ $current=$iv_ruletarget.current.getText(); }
	EOF;

// Rule target
ruletarget returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTargetAccess().getInstanceParserRuleCall_0());
		}
		this_Instance_0=ruleInstance
		{
			$current.merge(this_Instance_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTargetAccess().getRepoParserRuleCall_1());
		}
		this_Repo_1=ruleRepo
		{
			$current.merge(this_Repo_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTargetAccess().getProjectParserRuleCall_2());
		}
		this_Project_2=ruleProject
		{
			$current.merge(this_Project_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTargetAccess().getFileParserRuleCall_3());
		}
		this_File_3=ruleFile
		{
			$current.merge(this_File_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInstance
entryRuleInstance returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInstanceRule()); }
	iv_ruleInstance=ruleInstance
	{ $current=$iv_ruleInstance.current.getText(); }
	EOF;

// Rule Instance
ruleInstance returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='instance'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getInstanceAccess().getInstanceKeyword());
	}
;

// Entry rule entryRuleRepo
entryRuleRepo returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRepoRule()); }
	iv_ruleRepo=ruleRepo
	{ $current=$iv_ruleRepo.current.getText(); }
	EOF;

// Rule Repo
ruleRepo returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='repo'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRepoAccess().getRepoKeyword());
	}
;

// Entry rule entryRuleProject
entryRuleProject returns [String current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current.getText(); }
	EOF;

// Rule Project
ruleProject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='project'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getProjectAccess().getProjectKeyword());
	}
;

// Entry rule entryRuleFile
entryRuleFile returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current.getText(); }
	EOF;

// Rule File
ruleFile returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='file'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFileAccess().getFileKeyword());
	}
;

RULE_VALID_ID : ('_'|RULE_LETTER) (RULE_LETTER|RULE_DIGIT|'_')*;

fragment RULE_LETTER : ('a'..'z'|'A'..'Z');

fragment RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
