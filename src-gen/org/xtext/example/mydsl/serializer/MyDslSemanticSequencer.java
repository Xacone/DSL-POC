/*
 * generated by Xtext 2.31.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Model;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.api_token;
import org.xtext.example.mydsl.myDsl.array;
import org.xtext.example.mydsl.myDsl.arrayElement;
import org.xtext.example.mydsl.myDsl.array_content;
import org.xtext.example.mydsl.myDsl.identify;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.API_TOKEN:
				sequence_api_token(context, (api_token) semanticObject); 
				return; 
			case MyDslPackage.ARRAY:
				sequence_array(context, (array) semanticObject); 
				return; 
			case MyDslPackage.ARRAY_ELEMENT:
				if (rule == grammarAccess.getArrayElementRule()) {
					sequence_arrayElement(context, (arrayElement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getIdentifyRule()) {
					sequence_arrayElement_identify(context, (arrayElement) semanticObject); 
					return; 
				}
				else break;
			case MyDslPackage.ARRAY_CONTENT:
				sequence_array_content(context, (array_content) semanticObject); 
				return; 
			case MyDslPackage.IDENTIFY:
				sequence_identify(context, (identify) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (tokens+=api_token | arrays+=array | loops+=loop | identifications+=identify)+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     api_token returns api_token
	 *
	 * Constraint:
	 *     (nom_token=VALID_ID token=STRING)
	 * </pre>
	 */
	protected void sequence_api_token(ISerializationContext context, api_token semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.API_TOKEN__NOM_TOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.API_TOKEN__NOM_TOKEN));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.API_TOKEN__TOKEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.API_TOKEN__TOKEN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getApi_tokenAccess().getNom_tokenVALID_IDTerminalRuleCall_1_0(), semanticObject.getNom_token());
		feeder.accept(grammarAccess.getApi_tokenAccess().getTokenSTRINGTerminalRuleCall_2_0(), semanticObject.getToken());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     arrayElement returns arrayElement
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_arrayElement(ISerializationContext context, arrayElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ARRAY_ELEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ARRAY_ELEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArrayElementAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     identify returns arrayElement
	 *
	 * Constraint:
	 *     (value=STRING identify_array+=array_content*)
	 * </pre>
	 */
	protected void sequence_arrayElement_identify(ISerializationContext context, arrayElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     array returns array
	 *
	 * Constraint:
	 *     (targets+=target array_names+=VALID_ID array_contents+=array_content)
	 * </pre>
	 */
	protected void sequence_array(ISerializationContext context, array semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     array_content returns array_content
	 *
	 * Constraint:
	 *     (Array+=arrayElement Array+=arrayElement*)
	 * </pre>
	 */
	protected void sequence_array_content(ISerializationContext context, array_content semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     identify returns identify
	 *
	 * Constraint:
	 *     (identify_array+=array_content identify_array+=array_content*)
	 * </pre>
	 */
	protected void sequence_identify(ISerializationContext context, identify semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
