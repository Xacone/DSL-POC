/*
 * generated by Xtext 2.31.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cArraysAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArraysArrayParserRuleCall_0 = (RuleCall)cArraysAssignment.eContents().get(0);
		
		///*
		//Addition:
		//    'Sum' '{' elements+=SumElement ('+' elements+=SumElement)* '}';
		//SumElement:
		//    value=INT;
		//Greeting:
		//    'Hello' name=ID '!';
		//Loop_rule: 'on' Array Action Saut Tab;
		//Action:
		//    'apply' | 'fetch' | 'Analyze'
		//;
		//Array:
		//    ( 'instances' | 'rules' | 'repos' | 'patterns' ) '{' Array+=ArrayElement (',' Array+=ArrayElement)* '}'
		//;
		//ArrayElement:
		//    value=STRING
		//;
		//Saut: '\n';
		//Tab: '\t';
		//*/
		//Model:
		//    arrays+=array*;
		@Override public ParserRule getRule() { return rule; }
		
		//arrays+=array*
		public Assignment getArraysAssignment() { return cArraysAssignment; }
		
		//array
		public RuleCall getArraysArrayParserRuleCall_0() { return cArraysArrayParserRuleCall_0; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetsTargetParserRuleCall_0_0 = (RuleCall)cTargetsAssignment_0.eContents().get(0);
		private final Assignment cArray_namesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArray_namesVALID_IDTerminalRuleCall_1_0 = (RuleCall)cArray_namesAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArrayAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArrayArrayElementParserRuleCall_3_0 = (RuleCall)cArrayAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArrayAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArrayArrayElementParserRuleCall_4_1_0 = (RuleCall)cArrayAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketLineFeedLfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//array: targets+=target array_names+=VALID_ID '{' Array+=arrayElement (',' Array+=arrayElement)* '}\n';
		@Override public ParserRule getRule() { return rule; }
		
		//targets+=target array_names+=VALID_ID '{' Array+=arrayElement (',' Array+=arrayElement)* '}\n'
		public Group getGroup() { return cGroup; }
		
		//targets+=target
		public Assignment getTargetsAssignment_0() { return cTargetsAssignment_0; }
		
		//target
		public RuleCall getTargetsTargetParserRuleCall_0_0() { return cTargetsTargetParserRuleCall_0_0; }
		
		//array_names+=VALID_ID
		public Assignment getArray_namesAssignment_1() { return cArray_namesAssignment_1; }
		
		//VALID_ID
		public RuleCall getArray_namesVALID_IDTerminalRuleCall_1_0() { return cArray_namesVALID_IDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//Array+=arrayElement
		public Assignment getArrayAssignment_3() { return cArrayAssignment_3; }
		
		//arrayElement
		public RuleCall getArrayArrayElementParserRuleCall_3_0() { return cArrayArrayElementParserRuleCall_3_0; }
		
		//(',' Array+=arrayElement)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//Array+=arrayElement
		public Assignment getArrayAssignment_4_1() { return cArrayAssignment_4_1; }
		
		//arrayElement
		public RuleCall getArrayArrayElementParserRuleCall_4_1_0() { return cArrayArrayElementParserRuleCall_4_1_0; }
		
		//'}\n'
		public Keyword getRightCurlyBracketLineFeedLfKeyword_5() { return cRightCurlyBracketLineFeedLfKeyword_5; }
	}
	public class ArrayElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.arrayElement");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//arrayElement: value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.target");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRepoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProjectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFileParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//target:
		//    (Instance | Repo | Project | File)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Instance | Repo | Project | File)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Instance
		public RuleCall getInstanceParserRuleCall_0() { return cInstanceParserRuleCall_0; }
		
		//Repo
		public RuleCall getRepoParserRuleCall_1() { return cRepoParserRuleCall_1; }
		
		//Project
		public RuleCall getProjectParserRuleCall_2() { return cProjectParserRuleCall_2; }
		
		//File
		public RuleCall getFileParserRuleCall_3() { return cFileParserRuleCall_3; }
	}
	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Instance");
		private final Keyword cInstanceKeyword = (Keyword)rule.eContents().get(1);
		
		//Instance: 'instance';
		@Override public ParserRule getRule() { return rule; }
		
		//'instance'
		public Keyword getInstanceKeyword() { return cInstanceKeyword; }
	}
	public class RepoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Repo");
		private final Keyword cRepoKeyword = (Keyword)rule.eContents().get(1);
		
		//Repo: 'repo';
		@Override public ParserRule getRule() { return rule; }
		
		//'repo'
		public Keyword getRepoKeyword() { return cRepoKeyword; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Project");
		private final Keyword cProjectKeyword = (Keyword)rule.eContents().get(1);
		
		//Project: 'project';
		@Override public ParserRule getRule() { return rule; }
		
		//'project'
		public Keyword getProjectKeyword() { return cProjectKeyword; }
	}
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.File");
		private final Keyword cFileKeyword = (Keyword)rule.eContents().get(1);
		
		//File: 'file';
		@Override public ParserRule getRule() { return rule; }
		
		//'file'
		public Keyword getFileKeyword() { return cFileKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final ArrayElements pArray;
	private final ArrayElementElements pArrayElement;
	private final TargetElements pTarget;
	private final InstanceElements pInstance;
	private final RepoElements pRepo;
	private final ProjectElements pProject;
	private final FileElements pFile;
	private final TerminalRule tVALID_ID;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pArray = new ArrayElements();
		this.pArrayElement = new ArrayElementElements();
		this.pTarget = new TargetElements();
		this.pInstance = new InstanceElements();
		this.pRepo = new RepoElements();
		this.pProject = new ProjectElements();
		this.pFile = new FileElements();
		this.tVALID_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VALID_ID");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DIGIT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	//Addition:
	//    'Sum' '{' elements+=SumElement ('+' elements+=SumElement)* '}';
	//SumElement:
	//    value=INT;
	//Greeting:
	//    'Hello' name=ID '!';
	//Loop_rule: 'on' Array Action Saut Tab;
	//Action:
	//    'apply' | 'fetch' | 'Analyze'
	//;
	//Array:
	//    ( 'instances' | 'rules' | 'repos' | 'patterns' ) '{' Array+=ArrayElement (',' Array+=ArrayElement)* '}'
	//;
	//ArrayElement:
	//    value=STRING
	//;
	//Saut: '\n';
	//Tab: '\t';
	//*/
	//Model:
	//    arrays+=array*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//array: targets+=target array_names+=VALID_ID '{' Array+=arrayElement (',' Array+=arrayElement)* '}\n';
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//arrayElement: value=STRING;
	public ArrayElementElements getArrayElementAccess() {
		return pArrayElement;
	}
	
	public ParserRule getArrayElementRule() {
		return getArrayElementAccess().getRule();
	}
	
	//target:
	//    (Instance | Repo | Project | File)
	//;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//Instance: 'instance';
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}
	
	//Repo: 'repo';
	public RepoElements getRepoAccess() {
		return pRepo;
	}
	
	public ParserRule getRepoRule() {
		return getRepoAccess().getRule();
	}
	
	//Project: 'project';
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//File: 'file';
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//terminal VALID_ID:
	//    ('_' | LETTER) (LETTER | DIGIT | '_')*;
	public TerminalRule getVALID_IDRule() {
		return tVALID_ID;
	}
	
	//terminal LETTER:
	//    ('a'..'z' | 'A'..'Z');
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal DIGIT:
	//    '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
