/*
 * generated by Xtext 2.31.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTokensAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTokensApi_tokenParserRuleCall_0_0 = (RuleCall)cTokensAssignment_0.eContents().get(0);
		private final Assignment cArraysAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArraysArrayParserRuleCall_1_0 = (RuleCall)cArraysAssignment_1.eContents().get(0);
		private final Assignment cLoopsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLoopsLoopParserRuleCall_2_0 = (RuleCall)cLoopsAssignment_2.eContents().get(0);
		private final Assignment cIdentificationsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIdentificationsIdentifyParserRuleCall_3_0 = (RuleCall)cIdentificationsAssignment_3.eContents().get(0);
		
		//Model:
		//     (tokens+=api_token | arrays+=array | loops+=loop | identifications+=identify)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(tokens+=api_token | arrays+=array | loops+=loop | identifications+=identify)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//tokens+=api_token
		public Assignment getTokensAssignment_0() { return cTokensAssignment_0; }
		
		//api_token
		public RuleCall getTokensApi_tokenParserRuleCall_0_0() { return cTokensApi_tokenParserRuleCall_0_0; }
		
		//arrays+=array
		public Assignment getArraysAssignment_1() { return cArraysAssignment_1; }
		
		//array
		public RuleCall getArraysArrayParserRuleCall_1_0() { return cArraysArrayParserRuleCall_1_0; }
		
		//loops+=loop
		public Assignment getLoopsAssignment_2() { return cLoopsAssignment_2; }
		
		//loop
		public RuleCall getLoopsLoopParserRuleCall_2_0() { return cLoopsLoopParserRuleCall_2_0; }
		
		//identifications+=identify
		public Assignment getIdentificationsAssignment_3() { return cIdentificationsAssignment_3; }
		
		//identify
		public RuleCall getIdentificationsIdentifyParserRuleCall_3_0() { return cIdentificationsIdentifyParserRuleCall_3_0; }
	}
	public class IdentifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.identify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdentify_arrayAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdentify_arrayArray_contentParserRuleCall_1_0_0 = (RuleCall)cIdentify_arrayAssignment_1_0.eContents().get(0);
		private final RuleCall cArrayElementParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdentify_arrayAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentify_arrayArray_contentParserRuleCall_2_1_0 = (RuleCall)cIdentify_arrayAssignment_2_1.eContents().get(0);
		
		//    /*arrays+=array*;*/
		//identify : 'identify' (identify_array+=array_content | arrayElement) (',' identify_array+=array_content)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'identify' (identify_array+=array_content | arrayElement) (',' identify_array+=array_content)*
		public Group getGroup() { return cGroup; }
		
		//'identify'
		public Keyword getIdentifyKeyword_0() { return cIdentifyKeyword_0; }
		
		//(identify_array+=array_content | arrayElement)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//identify_array+=array_content
		public Assignment getIdentify_arrayAssignment_1_0() { return cIdentify_arrayAssignment_1_0; }
		
		//array_content
		public RuleCall getIdentify_arrayArray_contentParserRuleCall_1_0_0() { return cIdentify_arrayArray_contentParserRuleCall_1_0_0; }
		
		//arrayElement
		public RuleCall getArrayElementParserRuleCall_1_1() { return cArrayElementParserRuleCall_1_1; }
		
		//(',' identify_array+=array_content)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//identify_array+=array_content
		public Assignment getIdentify_arrayAssignment_2_1() { return cIdentify_arrayAssignment_2_1; }
		
		//array_content
		public RuleCall getIdentify_arrayArray_contentParserRuleCall_2_1_0() { return cIdentify_arrayArray_contentParserRuleCall_2_1_0; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cVALID_IDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDoParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLinejumpParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cLinespaceParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//loop: 'on' VALID_ID do linejump linespace;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' VALID_ID do linejump linespace
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//VALID_ID
		public RuleCall getVALID_IDTerminalRuleCall_1() { return cVALID_IDTerminalRuleCall_1; }
		
		//do
		public RuleCall getDoParserRuleCall_2() { return cDoParserRuleCall_2; }
		
		//linejump
		public RuleCall getLinejumpParserRuleCall_3() { return cLinejumpParserRuleCall_3; }
		
		//linespace
		public RuleCall getLinespaceParserRuleCall_4() { return cLinespaceParserRuleCall_4; }
	}
	public class DoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.do");
		private final RuleCall cApplyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//do : apply;
		@Override public ParserRule getRule() { return rule; }
		
		//apply
		public RuleCall getApplyParserRuleCall() { return cApplyParserRuleCall; }
	}
	public class ApplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.apply");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cActionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//apply : 'apply' action;
		@Override public ParserRule getRule() { return rule; }
		
		//'apply' action
		public Group getGroup() { return cGroup; }
		
		//'apply'
		public Keyword getApplyKeyword_0() { return cApplyKeyword_0; }
		
		//action
		public RuleCall getActionParserRuleCall_1() { return cActionParserRuleCall_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cScanKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cReportKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cLinejumpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//action: ('scan' | 'report') linejump;
		@Override public ParserRule getRule() { return rule; }
		
		//('scan' | 'report') linejump
		public Group getGroup() { return cGroup; }
		
		//('scan' | 'report')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'scan'
		public Keyword getScanKeyword_0_0() { return cScanKeyword_0_0; }
		
		//'report'
		public Keyword getReportKeyword_0_1() { return cReportKeyword_0_1; }
		
		//linejump
		public RuleCall getLinejumpParserRuleCall_1() { return cLinejumpParserRuleCall_1; }
	}
	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetsTargetParserRuleCall_0_0 = (RuleCall)cTargetsAssignment_0.eContents().get(0);
		private final Assignment cArray_namesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArray_namesVALID_IDTerminalRuleCall_1_0 = (RuleCall)cArray_namesAssignment_1.eContents().get(0);
		private final Assignment cArray_contentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArray_contentsArray_contentParserRuleCall_2_0 = (RuleCall)cArray_contentsAssignment_2.eContents().get(0);
		private final Keyword cLineFeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//array: targets+=target array_names+=VALID_ID array_contents+=array_content'\n';
		@Override public ParserRule getRule() { return rule; }
		
		//targets+=target array_names+=VALID_ID array_contents+=array_content'\n'
		public Group getGroup() { return cGroup; }
		
		//targets+=target
		public Assignment getTargetsAssignment_0() { return cTargetsAssignment_0; }
		
		//target
		public RuleCall getTargetsTargetParserRuleCall_0_0() { return cTargetsTargetParserRuleCall_0_0; }
		
		//array_names+=VALID_ID
		public Assignment getArray_namesAssignment_1() { return cArray_namesAssignment_1; }
		
		//VALID_ID
		public RuleCall getArray_namesVALID_IDTerminalRuleCall_1_0() { return cArray_namesVALID_IDTerminalRuleCall_1_0; }
		
		//array_contents+=array_content
		public Assignment getArray_contentsAssignment_2() { return cArray_contentsAssignment_2; }
		
		//array_content
		public RuleCall getArray_contentsArray_contentParserRuleCall_2_0() { return cArray_contentsArray_contentParserRuleCall_2_0; }
		
		//'\n'
		public Keyword getLineFeedKeyword_3() { return cLineFeedKeyword_3; }
	}
	public class Array_contentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.array_content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArrayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArrayArrayElementParserRuleCall_1_0 = (RuleCall)cArrayAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArrayAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArrayArrayElementParserRuleCall_2_1_0 = (RuleCall)cArrayAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//array_content: '{' Array+=arrayElement (',' Array+=arrayElement)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' Array+=arrayElement (',' Array+=arrayElement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//Array+=arrayElement
		public Assignment getArrayAssignment_1() { return cArrayAssignment_1; }
		
		//arrayElement
		public RuleCall getArrayArrayElementParserRuleCall_1_0() { return cArrayArrayElementParserRuleCall_1_0; }
		
		//(',' Array+=arrayElement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//Array+=arrayElement
		public Assignment getArrayAssignment_2_1() { return cArrayAssignment_2_1; }
		
		//arrayElement
		public RuleCall getArrayArrayElementParserRuleCall_2_1_0() { return cArrayArrayElementParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ArrayElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.arrayElement");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//arrayElement: value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.target");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRepoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProjectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFileParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//target:
		//    (Instance | Repo | Project | File)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Instance | Repo | Project | File)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Instance
		public RuleCall getInstanceParserRuleCall_0() { return cInstanceParserRuleCall_0; }
		
		//Repo
		public RuleCall getRepoParserRuleCall_1() { return cRepoParserRuleCall_1; }
		
		//Project
		public RuleCall getProjectParserRuleCall_2() { return cProjectParserRuleCall_2; }
		
		//File
		public RuleCall getFileParserRuleCall_3() { return cFileParserRuleCall_3; }
	}
	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Instance");
		private final Keyword cInstanceKeyword = (Keyword)rule.eContents().get(1);
		
		//Instance: 'instance';
		@Override public ParserRule getRule() { return rule; }
		
		//'instance'
		public Keyword getInstanceKeyword() { return cInstanceKeyword; }
	}
	public class RepoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Repo");
		private final Keyword cRepoKeyword = (Keyword)rule.eContents().get(1);
		
		//Repo: 'repo';
		@Override public ParserRule getRule() { return rule; }
		
		//'repo'
		public Keyword getRepoKeyword() { return cRepoKeyword; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Project");
		private final Keyword cProjectKeyword = (Keyword)rule.eContents().get(1);
		
		//Project: 'project';
		@Override public ParserRule getRule() { return rule; }
		
		//'project'
		public Keyword getProjectKeyword() { return cProjectKeyword; }
	}
	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.File");
		private final Keyword cFileKeyword = (Keyword)rule.eContents().get(1);
		
		//File: 'file';
		@Override public ParserRule getRule() { return rule; }
		
		//'file'
		public Keyword getFileKeyword() { return cFileKeyword; }
	}
	public class Api_tokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.api_token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTokenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNom_tokenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNom_tokenVALID_IDTerminalRuleCall_1_0 = (RuleCall)cNom_tokenAssignment_1.eContents().get(0);
		private final Assignment cTokenAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTokenSTRINGTerminalRuleCall_2_0 = (RuleCall)cTokenAssignment_2.eContents().get(0);
		private final RuleCall cLinejumpParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//api_token: 'token ' nom_token=VALID_ID token=STRING (linejump)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'token ' nom_token=VALID_ID token=STRING (linejump)*
		public Group getGroup() { return cGroup; }
		
		//'token '
		public Keyword getTokenKeyword_0() { return cTokenKeyword_0; }
		
		//nom_token=VALID_ID
		public Assignment getNom_tokenAssignment_1() { return cNom_tokenAssignment_1; }
		
		//VALID_ID
		public RuleCall getNom_tokenVALID_IDTerminalRuleCall_1_0() { return cNom_tokenVALID_IDTerminalRuleCall_1_0; }
		
		//token=STRING
		public Assignment getTokenAssignment_2() { return cTokenAssignment_2; }
		
		//STRING
		public RuleCall getTokenSTRINGTerminalRuleCall_2_0() { return cTokenSTRINGTerminalRuleCall_2_0; }
		
		//(linejump)*
		public RuleCall getLinejumpParserRuleCall_3() { return cLinejumpParserRuleCall_3; }
	}
	public class LinespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.linespace");
		private final Keyword cTabKeyword = (Keyword)rule.eContents().get(1);
		
		//linespace: '\t';
		@Override public ParserRule getRule() { return rule; }
		
		//'\t'
		public Keyword getTabKeyword() { return cTabKeyword; }
	}
	public class LinejumpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.linejump");
		private final Keyword cLineFeedKeyword = (Keyword)rule.eContents().get(1);
		
		//linejump: '\n';
		@Override public ParserRule getRule() { return rule; }
		
		//'\n'
		public Keyword getLineFeedKeyword() { return cLineFeedKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final IdentifyElements pIdentify;
	private final LoopElements pLoop;
	private final DoElements pDo;
	private final ApplyElements pApply;
	private final ActionElements pAction;
	private final ArrayElements pArray;
	private final Array_contentElements pArray_content;
	private final ArrayElementElements pArrayElement;
	private final TargetElements pTarget;
	private final InstanceElements pInstance;
	private final RepoElements pRepo;
	private final ProjectElements pProject;
	private final FileElements pFile;
	private final Api_tokenElements pApi_token;
	private final TerminalRule tVALID_ID;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	private final LinespaceElements pLinespace;
	private final LinejumpElements pLinejump;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pIdentify = new IdentifyElements();
		this.pLoop = new LoopElements();
		this.pDo = new DoElements();
		this.pApply = new ApplyElements();
		this.pAction = new ActionElements();
		this.pArray = new ArrayElements();
		this.pArray_content = new Array_contentElements();
		this.pArrayElement = new ArrayElementElements();
		this.pTarget = new TargetElements();
		this.pInstance = new InstanceElements();
		this.pRepo = new RepoElements();
		this.pProject = new ProjectElements();
		this.pFile = new FileElements();
		this.pApi_token = new Api_tokenElements();
		this.tVALID_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VALID_ID");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DIGIT");
		this.pLinespace = new LinespaceElements();
		this.pLinejump = new LinejumpElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//     (tokens+=api_token | arrays+=array | loops+=loop | identifications+=identify)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//    /*arrays+=array*;*/
	//identify : 'identify' (identify_array+=array_content | arrayElement) (',' identify_array+=array_content)*;
	public IdentifyElements getIdentifyAccess() {
		return pIdentify;
	}
	
	public ParserRule getIdentifyRule() {
		return getIdentifyAccess().getRule();
	}
	
	//loop: 'on' VALID_ID do linejump linespace;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//do : apply;
	public DoElements getDoAccess() {
		return pDo;
	}
	
	public ParserRule getDoRule() {
		return getDoAccess().getRule();
	}
	
	//apply : 'apply' action;
	public ApplyElements getApplyAccess() {
		return pApply;
	}
	
	public ParserRule getApplyRule() {
		return getApplyAccess().getRule();
	}
	
	//action: ('scan' | 'report') linejump;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//array: targets+=target array_names+=VALID_ID array_contents+=array_content'\n';
	public ArrayElements getArrayAccess() {
		return pArray;
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}
	
	//array_content: '{' Array+=arrayElement (',' Array+=arrayElement)* '}';
	public Array_contentElements getArray_contentAccess() {
		return pArray_content;
	}
	
	public ParserRule getArray_contentRule() {
		return getArray_contentAccess().getRule();
	}
	
	//arrayElement: value=STRING;
	public ArrayElementElements getArrayElementAccess() {
		return pArrayElement;
	}
	
	public ParserRule getArrayElementRule() {
		return getArrayElementAccess().getRule();
	}
	
	//target:
	//    (Instance | Repo | Project | File)
	//;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//Instance: 'instance';
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}
	
	//Repo: 'repo';
	public RepoElements getRepoAccess() {
		return pRepo;
	}
	
	public ParserRule getRepoRule() {
		return getRepoAccess().getRule();
	}
	
	//Project: 'project';
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//File: 'file';
	public FileElements getFileAccess() {
		return pFile;
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}
	
	//api_token: 'token ' nom_token=VALID_ID token=STRING (linejump)*;
	public Api_tokenElements getApi_tokenAccess() {
		return pApi_token;
	}
	
	public ParserRule getApi_tokenRule() {
		return getApi_tokenAccess().getRule();
	}
	
	//terminal VALID_ID:
	//    ('_' | LETTER) (LETTER | DIGIT | '_')*;
	public TerminalRule getVALID_IDRule() {
		return tVALID_ID;
	}
	
	//terminal LETTER:
	//    ('a'..'z' | 'A'..'Z');
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal DIGIT:
	//    '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//linespace: '\t';
	public LinespaceElements getLinespaceAccess() {
		return pLinespace;
	}
	
	public ParserRule getLinespaceRule() {
		return getLinespaceAccess().getRule();
	}
	
	//linejump: '\n';
	public LinejumpElements getLinejumpAccess() {
		return pLinejump;
	}
	
	public ParserRule getLinejumpRule() {
		return getLinejumpAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
